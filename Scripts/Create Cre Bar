import os
import pandas
import sys
from lims_database import LimsDatabase as ld
# from image_processing import ImageProcessing as ip
from excel_processing import ExcelProcessing as ex
import pickle
from sklearn.svm import NuSVC
import cv2
import matplotlib.pyplot as plt
import numpy as np
import h5py
from pylab import *
import xlsxwriter
from scipy.stats import kde
from math import log
from scipy import stats
from skimage.feature import hog
from skimage import data, color, exposure
from scipy.optimize import curve_fit
from sklearn.cross_validation import train_test_split
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.grid_search import GridSearchCV
from sklearn.metrics import classification_report
from sklearn import neighbors, datasets
from sklearn.svm import SVC
from scipy.stats.stats import pearsonr
from sklearn import preprocessing
from multiprocessing import Process
import matplotlib.mlab as mlab
from sklearn.cross_validation import train_test_split
from math import isnan
from sklearn.externals import joblib
import scipy
import collections
from sklearn import datasets, linear_model
from sklearn.preprocessing import Imputer
from sklearn.feature_selection import RFE
import time
import pdb
from scipy.misc import toimage
from psycopg2 import connect
import warnings
from datetime import datetime
from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import label_binarize
from sklearn.multiclass import OneVsRestClassifier
from scipy import interp
from matplotlib import cm as CM
from matplotlib import mlab as ML
from sync_meta import SyncMeta as sm
from allensdk.core.brain_observatory_cache import BrainObservatoryCache
from allensdk.core.brain_observatory_nwb_data_set import BrainObservatoryNwbDataSet
from Sync_Camera_Stimulus_Analysis import Get_Wheel as gw
from PIL import Image




def run (ids , ann_data):

    # boc = BrainObservatoryCache(manifest_file='boc/manifest.json')


    # Get data container information
    count = 0

    db_params = {
        u'dbname': u'lims2',
        u'user': u'limsreader',
        u'host': u'limsdb2',
        u'password': u'limsro',
        u'port': 5432
    }

    QUERY = " ".join(("SELECT sp.name, ec.id, ec.workflow_state, eso.stimulus_name, eso.id, eso.workflow_state",
                      "FROM experiment_sessions eso",
                      "LEFT JOIN experiment_containers ec ON ec.id = eso.experiment_container_id",
                      "JOIN specimens sp ON sp.id=eso.specimen_id",
                      "WHERE eso.id='{}';"))

    def get_db_cursor(dbname, user, host, password, port):
        con = connect(dbname=dbname,
                      user=user,
                      host=host,
                      password=password,
                      port=port)
        return con.cursor()

    cur = get_db_cursor(**db_params)

    # find container status
    def find_status(lims_id):
        query = QUERY.format(lims_id)
        cur.execute(query)
        return cur.fetchall()


    # types of possible stimuli
    stimuli = ['spontaneous_stimulus', 'drifting_gratings_stimulus', 'natural_movie_one_stimulus',
               'natural_movie_two_stimulus',
               'natural_movie_three_stimulus', 'static_gratings_stimulus',
               'locally_sparse_noise_stimulus']

    A_count = 0
    B_count = 0
    C_count = 0

    # read in global report for analysis and read excel ids
    excel_data = pandas.read_excel('C:\Users\mahdir\Documents\Allen Projects\Behavior Annotation\global_report.xlsx', sheetname = 'all')
    excel_ids = excel_data['lims ID']
    mid_list = excel_data['lims_database_specimen_id']

    # unique = np.unique(rig_list)
    # # unique_operator = np.unique(operator_list).tolist()
    # session_results = [[] for _ in range(17)]

    Cux2 = []
    Emx1 = []
    Rbp4 = []
    Rorb = []
    Scnn1a =[]


    anxiety = []
    session = []

    fail = []
    session_results = [[] for _ in range(17)]

    for id in ids:
        if id.strip() == id.strip():
            qc_status = np.array(find_status(id.strip()))
            stimulus = qc_status[(0)][3]
            status = qc_status[(0)][2]
            mouse = qc_status[(0)][0].split(';')
            cre = mouse[0].split(',')
            creline = cre[0].split('-')
            creline = creline[0]

        # check if failed

        # if str(status) != 'failed':
            id = id.strip()

            # get new video directory
            new_dir = '\\'+str(ld(id).get_video_directory())[0:-1]


            # get behavior and neural activity timing, as well as annotated data and dff traces
            data = ann_data[count]


            # determine how many unique fidget examples there are
            flu_count = 0

            for f in range(len(data)-200):
                if (data[f] == 1 and data[f + 1] == 0) or (data[f] == 2 and data[f + 1] == 0):
                    flu_count += 1
            if stimulus == 'three_session_C':
                if creline == 'Cux2':
                    Cux2.append(flu_count)
                if creline == 'Emx1':
                    Emx1.append(flu_count)
                if creline == 'Rbp4':
                    Rbp4.append(flu_count)
                if creline == 'Rorb':
                    Rorb.append(flu_count)
                if creline == 'Scnn1a':
                    Scnn1a.append(flu_count)
        count += 1
    objects = ('Cux2', 'Rbp4', 'Rorb')

    data_c = [[Cux2], [Rbp4], [Rorb] ]

    plt.bar(objects,[np.mean(Cux2), np.mean(Rbp4), np.mean(Rorb)], color = 'k')
    plt.errorbar(objects,[np.mean(Cux2),np.mean(Rbp4), np.mean(Rorb)],[np.std(Cux2),np.std(Rbp4), np.std(Rorb)], fmt = None, color = 'r')
    plt.title(' Cre Based Fidget Count Stimulus C')
    plt.ylabel('Session Fidget Count')
    plt.show()


    for i in range(4):
        print(np.mean(data_c[i]), np.std(data_c[i]), shape(data_c[i]))








def array2image(a):
    if a.typecode() == Numeric.UnsignedInt8:
        mode = "L"
    elif a.typecode() == Numeric.Float32:
        mode = "F"
    else:
        raise ValueError, "unsupported image mode"
    return Image.fromstring(mode, (a.shape[1], a.shape[0]), a.tostring())

def myfunction (x):
    return len (x)

def open_nwb(lims_ID):

    directory = ld(lims_ID.strip()).get_video_directory()
    nwb_file = False
    # opens nwb file
    for file in os.listdir(directory):
        if file.endswith("nwb"):
            # make sure file is in there!
            nwb_path = os.path.join(directory, file)
            # input file path, r is for read only
            nwb_file = h5py.File(nwb_path, "r")

    return nwb_file



def create_histogram (data):

    values_fidget = []
    values_movement = []
    values_neither = []


    for i in range(len(data)):
        f = 0
        m = 0
        n = 0
        for k in range(len(data[i])):
            if data[i][k] == 0:
                f += 1
            elif data[i][k] == 1:
                n += 1
            elif data[i][k] == 2:
                m += 1
        try:
            values_fidget.append((float(f) / len(data[i]))*100)
            values_movement.append((float(m) / len(data[i]))*100)
            values_neither.append((float(n) / len(data[i]))*100)

            if ((float(f) / len(data[i]))*100) > 50:
                print(i)
        except:
            continue

    common_params = dict(bins=20,
                         range=(0, 100),
                         normed= False
                         )
    plt.hist((values_fidget, values_movement, values_neither), label= ('Fidget Frequency', 'Movement Frequency', 'Neither frequency'), **common_params)
    plt.legend ( loc = 'upper right')
    plt.xlabel (' Percent of Frames Displaying Behavior ')
    plt.ylabel( ' Number of Experiments ')
    plt.title("Distribution of Behavior Frequency of Occurrence")

    mean = np.mean(values_fidget)
    variance = np.var(values_fidget)
    sigma = np.sqrt(variance)
    x = np.linspace(min(values_fidget), max(values_fidget), 100)
    plt.plot(x, 500*mlab.normpdf(x, mean, sigma), color = ('b') )

    mean = np.mean(values_neither)
    variance = np.var(values_neither)
    sigma = np.sqrt(variance)
    x = np.linspace(min(values_neither), max(values_neither), 100)
    plt.plot(x, 500 * mlab.normpdf(x, mean, sigma), color=('r'))


    plt.show()


def optical_flow(prvs, next):

    # calculate optical flow and scale
    flow = cv2.calcOpticalFlowFarneback(prvs, next, 0.5, 3, 30, 3, 5, 1.2, 0)
    mag, ang= cv2.cartToPolar(flow[..., 0], flow[..., 1])

    # get histograms of optical flow and angles (these are our features)
    mag = process_input(exposure.rescale_intensity((1/mag), in_range=(-1, 1)))

    #ang = process_input((ang*180/np.pi/2))


    return {'mag': mag, 'ang': ang}

def process_input(input):

    # show_frame(resized)
    fd, h  = hog(input, orientations= 8, pixels_per_cell=(15, 15),
                        cells_per_block=(1, 1), visualise= True)

    return h

def fitExponent(tList,yList,ySS=0):
   '''
   This function finds a
       tList in sec
       yList - measurements
       ySS - the steady state value of y
   returns
       amplitude of exponent
       tau - the time constant
   '''
   bList = [log(max(y-ySS,1e-6)) for y in yList]
   b = matrix(bList).T
   rows = [ [1,t] for t in tList]
   A = matrix(rows)
   #w = (pinv(A)*b)
   (w,residuals,rank,sing_vals) = lstsq(A,b)
   tau = -1.0/w[1,0]
   amplitude = exp(w[0,0])
   return (amplitude,tau)




def get_all_data (lims_ids):
    data = [[] for _ in range(len(lims_ids))]
    k = 0
    for id in lims_ids:
        id = id.strip()
        try:
            data[k] = joblib.load ('\\\\aibsdata\ophysdev\oPhysQC\\beh_annotation\\Annotation Files\\30_frame_threshold_blocked_' + str(id) + '.pkl')
            k += 1
        except:
            print(str(id))

    return data

if __name__ == '__main__':
    # get list of lims id
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    text_file = open("C:\Users\mahdir\Documents\Allen Projects\Behavior Annotation\\LIMS_IDS.txt", "r")
    lims_ids = text_file.read().split(',')
    # print (lims_ids[35], lims_ids[48])

    # get annotated data
    ann_data = get_all_data(lims_ids)

    # use code to create behavior frequency histograms
    # create_histogram(ann_data)
    #
    # run main analysis script
    run(lims_ids, ann_data)
